/*----------------------------------------------------------------------------
 * CMSIS-RTOS 'main' function template
 *---------------------------------------------------------------------------*/

#define osObjectsPublic                     // define objects in main module
#include "osObjects.h"                      // RTOS object definitions
#include "GPIO_LPC17xx.h"               // Keil::Device:GPIO
#include "LPC17xx.h"                    // Device header
#include "PIN_LPC17xx.h"                // Keil::Device:PIN
#include "Driver_I2C.h"                 // ::CMSIS Driver:I2C
#include "Board_GLCD.h"                 // ::Board Support:Graphic LCD
#include "GLCD_Config.h"                // Keil.MCB1700::Board Support:Graphic LCD
#include "stdio.h"
#include "Driver_USART.h"               // ::CMSIS Driver:USART

#define SLAVE_I2C_ADDR	  0x52
#define Command1					0xF0
#define Command2					0x55

#define ConversionCommand	0x00

extern ARM_DRIVER_I2C Driver_I2C0;
extern ARM_DRIVER_USART Driver_USART1;
extern GLCD_FONT GLCD_Font_6x8;
extern GLCD_FONT GLCD_Font_16x24;

osThreadId ID_i2c_nunchuck;
osThreadId ID_envoiedeplacement;

void i2c_nunchuck(void const* argument)
{
	uint8_t programming[2];
	uint8_t conversion_command[1];
	uint8_t data_read_command[6];
	
	char texte1[30];
	char direction[1];
	
	uint8_t PosX,PosY;
	
	programming[0]=	Command1;
	programming[1]=	Command2;
	
	conversion_command[0]=ConversionCommand;

	Driver_I2C0.MasterTransmit (SLAVE_I2C_ADDR , programming, 2, false);		// false = avec stop
	osSignalWait(0x0001,osWaitForever);
	osDelay(50);
	
	while(1)
	{	
		
		Driver_I2C0.MasterTransmit (SLAVE_I2C_ADDR, conversion_command, 1, false);		// false = avec stop
		osSignalWait(0x0001,osWaitForever);
		osDelay(5);
		
		Driver_I2C0.MasterReceive (SLAVE_I2C_ADDR, data_read_command,6, false);		// false = avec stop
		osSignalWait(0x0001,osWaitForever);
		
		PosX=data_read_command[0];
		PosY=data_read_command[1];
		
		
		if((PosX>=122)&&(PosX<=142)&&(PosY>=213)&&(PosY<=233)){//Avance
			sprintf(texte1,"mouvementA:  %4d %4d",PosX,PosY);
			direction[0]='A';
		}
		
		if((PosX>=196)&&(PosX<=216)&&(PosY>=190)&&(PosY<=210)){//AvanceDroite
			sprintf(texte1,"mouvementAD:  %4d %4d",PosX,PosY);
			direction[0]='P';
		}
		
		if((PosX>=47)&&(PosX<=67)&&(PosY>=188)&&(PosY<=208)){//AvanceGauche
			sprintf(texte1,"mouvementAG: %4d %4d",PosX,PosY);
			direction[0]='O';
		}
		
		if((PosX>=220)&&(PosX<=240)&&(PosY>=114)&&(PosY<=134)){//Droite
			sprintf(texte1,"mouvementD:  %4d %4d",PosX,PosY);
			direction[0]='D';
		}
		
		if((PosX>=21)&&(PosX<=41)&&(PosY>=113)&&(PosY<=133)){//Gauche
			sprintf(texte1,"mouvementG:  %4d %4d",PosX,PosY);
			direction[0]='G';
		}
			
		if((PosX>=193)&&(PosX<=213)&&(PosY>=39)&&(PosY<=59)){//ReculeDroite
			sprintf(texte1,"mouvementRD:  %4d %4d",PosX,PosY);
			direction[0]='M';
		}
		
		if((PosX>=50)&&(PosX<=70)&&(PosY>=39)&&(PosY<=59)){//ReculeGauche
			sprintf(texte1,"mouvementRG:  %4d %4d",PosX,PosY);
			direction[0]='L';
		}
		
		if((PosX>=121)&&(PosX<=141)&&(PosY>=15)&&(PosY<=35)){//Recule
			sprintf(texte1,"mouvementR:  %4d %4d",PosX,PosY);
			direction[0]='R';
		}
		
		if((PosX>=115)&&(PosX<=145)&&(PosY>=110)&&(PosY<=140)){//Stop
			sprintf(texte1,"mouvementS:  %4d %4d",PosX,PosY);
			direction[0]='S';
		}
		
		GLCD_DrawString(10, 100, texte1);
		
		Driver_USART1.Send(&direction,2);
		osSignalWait(0x0002,osWaitForever);
		
	
		
		osDelay(200);
		
	}
}

void envoiedeplacement(void const* argument)
{

	
	while(1)
	{	
		
		
		
		
		osDelay(osWaitForever);
	}
}




osThreadDef (i2c_nunchuck,osPriorityNormal,1,0);

osThreadDef (envoiedeplacement,osPriorityNormal,1,0);

void uart_nun (uint32_t event){
	
	if (event & ARM_USART_EVENT_SEND_COMPLETE){
			osSignalSet(ID_i2c_nunchuck,0x0002);
	}
}
void i2c_nun (uint32_t event){
	
	if (event & ARM_I2C_EVENT_TRANSFER_DONE) {
			osSignalSet(ID_i2c_nunchuck,0x0001);
	}
}

void Init_I2C(void){
	Driver_I2C0.Initialize(i2c_nun);
	Driver_I2C0.PowerControl(ARM_POWER_FULL);
	Driver_I2C0.Control(	ARM_I2C_BUS_SPEED,				// 2nd argument = dï¿½bit
							ARM_I2C_BUS_SPEED_STANDARD  );	// 100 kHz
	Driver_I2C0.Control(	ARM_I2C_BUS_CLEAR,0 );
}


void Init_UART(void){
	Driver_USART1.Initialize(uart_nun);
	Driver_USART1.PowerControl(ARM_POWER_FULL);
	Driver_USART1.Control(	ARM_USART_MODE_ASYNCHRONOUS |
							ARM_USART_DATA_BITS_8		|
							ARM_USART_STOP_BITS_1		|
							ARM_USART_PARITY_NONE		|
							ARM_USART_FLOW_CONTROL_NONE,
							115200);
	Driver_USART1.Control(ARM_USART_CONTROL_TX,1);
	Driver_USART1.Control(ARM_USART_CONTROL_RX,1);
}

void Init_LCD(void){
	GLCD_Initialize();
	GLCD_ClearScreen();
	GLCD_SetFont(&GLCD_Font_6x8);
	GLCD_SetForegroundColor(GLCD_COLOR_BLACK);
}
/*
 * main: initialize and start the system
 */
int main (void) {
  osKernelInitialize ();                    // initialize CMSIS-RTOS

  // initialize peripherals here
	Init_I2C();
	Init_LCD();
	Init_UART();


  // create 'thread' functions that start executing,
  // example: tid_name = osThreadCreate (osThread(name), NULL);
	ID_i2c_nunchuck=osThreadCreate (osThread (i2c_nunchuck),NULL);
	ID_envoiedeplacement=osThreadCreate (osThread (envoiedeplacement),NULL);
	


  osKernelStart ();                         // start thread execution 
	osSignalSet(ID_i2c_nunchuck,0x0001);
	osDelay(osWaitForever);
	return 0;
}
